

local Train =  require 'class' --torch.class('')

function Train:init(model,data)
   
   self.model = model
   self.train_input = data.train.input
   self.train_label = data.train.label
   self.validation_input = data.validation.input
   self.validation_label = data.validation.label   
   self.test_input = data.test.input
   self.test_label = data.test.label
   
   self.batchSize = opt.batchSize
   self.criterion = nn.MSECriterion()
   self.iterationN = 10
   self.epochN = 10
   
end

function Train:run(mode)   
   
   if(mode == "train") then
      self.input = self.train_input
      self.label = self.train_label
   elseif (mode == "validation") then
      self.input = self.validation_input
      self.label = self.validation_label	 
   elseif (mode == "test") then
      self.input = self.test_input
      self.label = self.test_label	 
   end

   for i = 1,self.iterationN do
      
      local loss_x = self.criterion:forward(self.model:forward(self.input), self.label)
      print(loss_x)
      print(self.model.output)
      self.model:zeroGradParameters()
      if(mode == "train") then	 
	 self.model:backward(self.input, self.criterion:backward(self.model.output, self.label))
	 self.model:updateParameters(0.1)   
      end
   end
   
   return self.model
   
end


return Train


